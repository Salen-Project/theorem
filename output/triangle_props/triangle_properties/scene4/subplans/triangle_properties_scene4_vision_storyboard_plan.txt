<SCENE_VISION_STORYBOARD_PLAN>
[SCENE_VISION]
1.  Scene Overview:
    - This scene, titled "Angle Sum", demonstrates the triangle angle sum theorem by visually dissecting a triangle’s interior angles and rearranging them to form a straight line representing 180°. It connects prior discussions on angles and deepens the understanding of triangle properties.
    - Visual learning objectives for viewers: 
         • Use a visually distinct triangle (created via Manim’s Polygon class to allow a non-equilateral shape) centrally placed within the safe area margins.
         • Highlight the three interior angles using arcs (created with Manim’s Arc class) and label them using MathTex (with labels such as A, B, C or corresponding angle symbols).
         • Dynamically rearrange these angle sectors (using Manim’s Transform or MoveToTarget animations) so that they line up to form a straight line, clearly indicating that their sum equals 180°.
         • Use VGroup to bundle angle arcs and annotations for coordinated movement, ensuring every grouped element remains at least 0.3 units apart from others.
    - How Manim visuals & animations support learning:
         • MathTex will be used for the 180° expression and any necessary mathematical notation.
         • Tex will be used for titles and minimal narrative labels.
         • Polygon, Arc, and VGroup will be used to construct the triangle and its movable parts.
         • All objects are placed relative to ORIGIN and other scene elements (via .move_to(ORIGIN), .next_to(), and .shift() methods), ensuring strict adherence to safe area margins (0.5 units) and a minimum spacing of 0.3 units.
    - Key concepts are emphasized by gradually building from the whole triangle to its individual angle parts and finally demonstrating their sum as a straight line. Every visual is arranged with respect for the spatial constraints to avoid any overlaps.
    
[STORYBOARD]
1.  Visual Flow & Pacing (Manim Animation Sequence):
    - Begin with a brief title introduction using Tex.
         • Animation: Create the title with FadeIn (run_time=1.5) positioned relative to the top-center safe margin (using .to_edge(UP, buff=0.5)). Ensure there is a 0.3 unit gap from any subsequent elements.
         • Title text: Tex("Angle Sum Theorem") is aligned in the top-center.
         • Buffer: Wait(1) after the title fades in.

2.  Sub-scene 1 – Displaying the Triangle:
    - Visual Element: A triangle built using the Polygon class (to allow non-equilateral shaping) is centered in the scene. Its vertices are determined relative to ORIGIN ensuring each point remains within 0.5 units from scene edges.
         • Animation: Use Create(animation, run_time=2) to draw the triangle.
         • Positioning: Triangle is moved to ORIGIN (.move_to(ORIGIN)). Ensure a 0.3 unit spacing from the title (by placing it at least 0.3 units below the title text).
    - Add angle markers:
         • For each vertex (say, vertices A, B, and C), create an Arc (using Arc() with appropriate radius, e.g., 0.4) to represent the interior angle.
         • Use MathTex for labeling each arc (e.g., MathTex(r"\alpha"), MathTex(r"\beta"), MathTex(r"\gamma")).
         • Position each MathTex label using .next_to() method relative to its corresponding arc while maintaining a minimum gap of 0.3 units.
         • Animation: Animate the arcs and labels with FadeIn (run_time=1) sequentially.
         • Buffer: Wait(0.5) after all angle markers are in place.

3.  Sub-scene 2 – Dissecting and Rearranging Angles:
    - Visual Element: Copy VGroup of the three arc segments representing the angles.
         • Instruction: Group arcs into a VGroup (each separated by at least 0.3 units).
         • Plugin Suggestion: **Plugin Suggestion:** Consider using a plugin such as manim_sliding_mobject for smooth sliding transitions if available.
    - Animation Sequence:
         • Create a transformation animation (Transform or MoveToTarget) for the first arc: smoothly move the arc to the left of ORIGIN ensuring at least a 0.3 unit gap from the triangle.
         • Similarly, animate the second and third arcs: position one directly adjacent (next_to with RIGHT) to the first arc and the third next to the second arc using .next_to() ensuring that together they form a horizontal line.
         • As they line up, introduce a MathTex equation below or above the line reading MathTex(r"180^\circ") positioned via .next_to() the line with a 0.3 unit margin.
         • Animation: Use Write for the MathTex and Transform animations for the arcs (each run_time around 1-1.5 seconds).
         • Buffer: Wait(1) after the transformation completes to let viewers absorb the visual.

4.  Sub-scene 3 – Final Annotation and Emphasis:
    - Visual Element: Highlight the assembled straight line of angles with a surrounding rectangle or a circumscription using Circumscribe.
         • Animation: Use Circumscribe (run_time=1) to draw attention to the line.
    - Add succinct concluding annotation:
         • Use MathTex to display the final expression, for example: MathTex(r"\alpha+\beta+\gamma=180^\circ"). Place it below the rearranged angles using .next_to() while ensuring a 0.3 unit gap.
         • Animation: Animate with Write (run_time=1.5).
    - Buffer: Wait(1) to allow the learner to reflect on the theorem.

5.  Final Transition:
    - Fade out all transformed angle arcs, final annotation, and the triangle together using FadeOut, ensuring tags remain within safe area margins and all objects maintain the minimum spacing throughout the transition.
    - Final wait (2 seconds) for scene conclusion.

All placements use relative positioning (via .move_to(), .next_to(), .shift(), or .to_edge()) relative to ORIGIN, safe area margins (0.5 units), or other objects. Every object’s edge maintains a minimum gap of 0.3 units from any other element to ensure clarity.

</SCENE_VISION_STORYBOARD_PLAN>